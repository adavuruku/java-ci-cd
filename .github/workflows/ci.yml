# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest # specify server you intend to run the application [windows-latest, macOs-latest]
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    
    - name: Grant execute permission for Gradle wrapper
      run: chmod +x gradlew
    
    - name: Grant execute permission for Gradle wrapper
      run: chmod +x Dockerfile

    - name: Apply Lint to code base
      uses: docker://github/super-linter:v3
      env:
        VALIDATE_ALL_CODEBASE: false
        DEFAULT_BRANCH: main

    - name: Build with Gradle Wrapper
      run: ./gradlew build
    
    - uses: mr-smithers-excellent/docker-build-push@v4
      name: Build and push docker image
      with:
        image: sherifadavuruku/java-ci-cd-app
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }} 

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest #${{matrix.os}} # it should run on 3 os platform
    # strategy:
    #   matrix:
    #     os: [ubuntu-latest, windows-latest, macOs-latest]
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    

  # publish:
  #   needs: build #this indicate that this job depends on the build jobs
  #   runs-on: ${{matrix.os}} # it should run on 3 os platform
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #   permissions:
  #     contents: read

  #   steps:
  #   - uses: actions/checkout@v4
  #     name: Check out code

  #   - name: Verify JAR file exists
  #     run: |
  #         if [ ! -f build/libs/*.jar ]; then
  #           echo "JAR file not found!"
  #           exit 1
  #         fi

  #   - name: List directory contents
  #     run: ls -la

  #   - uses: mr-smithers-excellent/docker-build-push@v4
  #     name: Build and push docker image
  #     with:
  #       image: sherifadavuruku/java-ci-cd-app
  #       registry: docker.io
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }} 
