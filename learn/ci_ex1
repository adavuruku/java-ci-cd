# write a workflow for java gradle to cover this

# 1. set up required reviewer for PRs
# 2. run test and specify coverage
# 3. include that all PR comments must be resolved
# 4. reject push to a branch by different users
# 5. set atleast number of review of a PR
# 6. Make sure no conflict
# 7. Merge PR to master when all condition is meet
# 8. deploy to heroku


name: CI/CD Workflow

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  setup-required-reviewer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set required reviewers
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.number }}
          body: |
            Please review this PR:
            @required-reviewer

  run-tests:
    runs-on: ubuntu-latest
    needs: setup-required-reviewer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  check-pr-comments:
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check if all PR comments are resolved
        run: |
          unresolved_comments=$(gh pr review --list-comments ${{ github.event.number }} | grep -c 'unresolved')
          if [ "$unresolved_comments" -ne 0 ]; then
            echo "There are unresolved comments in this PR."
            exit 1
          fi

  check-branch-protection:
    runs-on: ubuntu-latest
    needs: check-pr-comments
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Ensure branch protection rules
        run: |
          pr_user=$(gh pr view ${{ github.event.number }} --json author --jq '.author.login')
          if [ "$pr_user" != "allowed-user" ]; then
            echo "Push to this branch is not allowed by user: $pr_user"
            exit 1
          fi

  check-merge-conditions:
    runs-on: ubuntu-latest
    needs: check-branch-protection
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Ensure at least 2 reviews are approved
        run: |
          reviews=$(gh pr view ${{ github.event.number }} --json reviews --jq '.reviews | map(select(.state == "APPROVED")) | length')
          if [ "$reviews" -lt 2 ]; then
            echo "Not enough approvals for this PR."
            exit 1
          fi

      - name: Check for merge conflicts
        run: |
          conflicts=$(gh pr view ${{ github.event.number }} --json mergeable --jq '.mergeable')
          if [ "$conflicts" != "MERGEABLE" ]; then
            echo "There are merge conflicts in this PR."
            exit 1
          fi

  merge-pr:
    runs-on: ubuntu-latest
    needs: check-merge-conditions
    if: github.event.pull_request.merged == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Merge PR
        run: |
          gh pr merge ${{ github.event.number }} --merge --auto --delete-branch

  deploy-to-heroku:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: merge-pr
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          git remote add heroku https://git.heroku.com/<your-heroku-app>.git
          git push heroku main
